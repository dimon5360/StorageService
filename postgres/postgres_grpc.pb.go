// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: postgres/postgres.proto

package postgres

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BarMapServiceClient is the client API for BarMapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BarMapServiceClient interface {
	// bars api
	CreateBar(ctx context.Context, in *CreateBarRequest, opts ...grpc.CallOption) (*Bar, error)
	UpdateBar(ctx context.Context, in *UpdateBarRequest, opts ...grpc.CallOption) (*Bar, error)
	DeleteBar(ctx context.Context, in *DeleteBarRequest, opts ...grpc.CallOption) (*DeleteBarResponse, error)
	ListBar(ctx context.Context, in *ListBarsRequest, opts ...grpc.CallOption) (*ListBarsResponse, error)
	GetBar(ctx context.Context, in *GetBarRequest, opts ...grpc.CallOption) (*Bar, error)
	// drinks api
	CreateDrink(ctx context.Context, in *CreateDrinkRequest, opts ...grpc.CallOption) (*Drink, error)
	UpdateDrink(ctx context.Context, in *UpdateDrinkRequest, opts ...grpc.CallOption) (*Drink, error)
	DeleteDrink(ctx context.Context, in *DeleteDrinkRequest, opts ...grpc.CallOption) (*DeleteDrinkResponse, error)
	ListDrink(ctx context.Context, in *ListDrinksRequest, opts ...grpc.CallOption) (*ListDrinksResponse, error)
	GetDrink(ctx context.Context, in *GetDrinkRequest, opts ...grpc.CallOption) (*Drink, error)
	// ingredients api
	CreateIngredient(ctx context.Context, in *CreateIngredientRequest, opts ...grpc.CallOption) (*Ingredient, error)
	UpdateIngredient(ctx context.Context, in *UpdateIngredientRequest, opts ...grpc.CallOption) (*Ingredient, error)
	DeleteIngredient(ctx context.Context, in *DeleteIngredientRequest, opts ...grpc.CallOption) (*DeleteIngredientResponse, error)
}

type barMapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBarMapServiceClient(cc grpc.ClientConnInterface) BarMapServiceClient {
	return &barMapServiceClient{cc}
}

func (c *barMapServiceClient) CreateBar(ctx context.Context, in *CreateBarRequest, opts ...grpc.CallOption) (*Bar, error) {
	out := new(Bar)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/CreateBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barMapServiceClient) UpdateBar(ctx context.Context, in *UpdateBarRequest, opts ...grpc.CallOption) (*Bar, error) {
	out := new(Bar)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/UpdateBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barMapServiceClient) DeleteBar(ctx context.Context, in *DeleteBarRequest, opts ...grpc.CallOption) (*DeleteBarResponse, error) {
	out := new(DeleteBarResponse)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/DeleteBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barMapServiceClient) ListBar(ctx context.Context, in *ListBarsRequest, opts ...grpc.CallOption) (*ListBarsResponse, error) {
	out := new(ListBarsResponse)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/ListBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barMapServiceClient) GetBar(ctx context.Context, in *GetBarRequest, opts ...grpc.CallOption) (*Bar, error) {
	out := new(Bar)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/GetBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barMapServiceClient) CreateDrink(ctx context.Context, in *CreateDrinkRequest, opts ...grpc.CallOption) (*Drink, error) {
	out := new(Drink)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/CreateDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barMapServiceClient) UpdateDrink(ctx context.Context, in *UpdateDrinkRequest, opts ...grpc.CallOption) (*Drink, error) {
	out := new(Drink)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/UpdateDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barMapServiceClient) DeleteDrink(ctx context.Context, in *DeleteDrinkRequest, opts ...grpc.CallOption) (*DeleteDrinkResponse, error) {
	out := new(DeleteDrinkResponse)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/DeleteDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barMapServiceClient) ListDrink(ctx context.Context, in *ListDrinksRequest, opts ...grpc.CallOption) (*ListDrinksResponse, error) {
	out := new(ListDrinksResponse)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/ListDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barMapServiceClient) GetDrink(ctx context.Context, in *GetDrinkRequest, opts ...grpc.CallOption) (*Drink, error) {
	out := new(Drink)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/GetDrink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barMapServiceClient) CreateIngredient(ctx context.Context, in *CreateIngredientRequest, opts ...grpc.CallOption) (*Ingredient, error) {
	out := new(Ingredient)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/CreateIngredient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barMapServiceClient) UpdateIngredient(ctx context.Context, in *UpdateIngredientRequest, opts ...grpc.CallOption) (*Ingredient, error) {
	out := new(Ingredient)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/UpdateIngredient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *barMapServiceClient) DeleteIngredient(ctx context.Context, in *DeleteIngredientRequest, opts ...grpc.CallOption) (*DeleteIngredientResponse, error) {
	out := new(DeleteIngredientResponse)
	err := c.cc.Invoke(ctx, "/postgres.BarMapService/DeleteIngredient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BarMapServiceServer is the server API for BarMapService service.
// All implementations must embed UnimplementedBarMapServiceServer
// for forward compatibility
type BarMapServiceServer interface {
	// bars api
	CreateBar(context.Context, *CreateBarRequest) (*Bar, error)
	UpdateBar(context.Context, *UpdateBarRequest) (*Bar, error)
	DeleteBar(context.Context, *DeleteBarRequest) (*DeleteBarResponse, error)
	ListBar(context.Context, *ListBarsRequest) (*ListBarsResponse, error)
	GetBar(context.Context, *GetBarRequest) (*Bar, error)
	// drinks api
	CreateDrink(context.Context, *CreateDrinkRequest) (*Drink, error)
	UpdateDrink(context.Context, *UpdateDrinkRequest) (*Drink, error)
	DeleteDrink(context.Context, *DeleteDrinkRequest) (*DeleteDrinkResponse, error)
	ListDrink(context.Context, *ListDrinksRequest) (*ListDrinksResponse, error)
	GetDrink(context.Context, *GetDrinkRequest) (*Drink, error)
	// ingredients api
	CreateIngredient(context.Context, *CreateIngredientRequest) (*Ingredient, error)
	UpdateIngredient(context.Context, *UpdateIngredientRequest) (*Ingredient, error)
	DeleteIngredient(context.Context, *DeleteIngredientRequest) (*DeleteIngredientResponse, error)
	mustEmbedUnimplementedBarMapServiceServer()
}

// UnimplementedBarMapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBarMapServiceServer struct {
}

func (UnimplementedBarMapServiceServer) CreateBar(context.Context, *CreateBarRequest) (*Bar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBar not implemented")
}
func (UnimplementedBarMapServiceServer) UpdateBar(context.Context, *UpdateBarRequest) (*Bar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBar not implemented")
}
func (UnimplementedBarMapServiceServer) DeleteBar(context.Context, *DeleteBarRequest) (*DeleteBarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBar not implemented")
}
func (UnimplementedBarMapServiceServer) ListBar(context.Context, *ListBarsRequest) (*ListBarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBar not implemented")
}
func (UnimplementedBarMapServiceServer) GetBar(context.Context, *GetBarRequest) (*Bar, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBar not implemented")
}
func (UnimplementedBarMapServiceServer) CreateDrink(context.Context, *CreateDrinkRequest) (*Drink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDrink not implemented")
}
func (UnimplementedBarMapServiceServer) UpdateDrink(context.Context, *UpdateDrinkRequest) (*Drink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDrink not implemented")
}
func (UnimplementedBarMapServiceServer) DeleteDrink(context.Context, *DeleteDrinkRequest) (*DeleteDrinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDrink not implemented")
}
func (UnimplementedBarMapServiceServer) ListDrink(context.Context, *ListDrinksRequest) (*ListDrinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrink not implemented")
}
func (UnimplementedBarMapServiceServer) GetDrink(context.Context, *GetDrinkRequest) (*Drink, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrink not implemented")
}
func (UnimplementedBarMapServiceServer) CreateIngredient(context.Context, *CreateIngredientRequest) (*Ingredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIngredient not implemented")
}
func (UnimplementedBarMapServiceServer) UpdateIngredient(context.Context, *UpdateIngredientRequest) (*Ingredient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIngredient not implemented")
}
func (UnimplementedBarMapServiceServer) DeleteIngredient(context.Context, *DeleteIngredientRequest) (*DeleteIngredientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIngredient not implemented")
}
func (UnimplementedBarMapServiceServer) mustEmbedUnimplementedBarMapServiceServer() {}

// UnsafeBarMapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BarMapServiceServer will
// result in compilation errors.
type UnsafeBarMapServiceServer interface {
	mustEmbedUnimplementedBarMapServiceServer()
}

func RegisterBarMapServiceServer(s grpc.ServiceRegistrar, srv BarMapServiceServer) {
	s.RegisterService(&BarMapService_ServiceDesc, srv)
}

func _BarMapService_CreateBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).CreateBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/CreateBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).CreateBar(ctx, req.(*CreateBarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarMapService_UpdateBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).UpdateBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/UpdateBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).UpdateBar(ctx, req.(*UpdateBarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarMapService_DeleteBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).DeleteBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/DeleteBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).DeleteBar(ctx, req.(*DeleteBarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarMapService_ListBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).ListBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/ListBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).ListBar(ctx, req.(*ListBarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarMapService_GetBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).GetBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/GetBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).GetBar(ctx, req.(*GetBarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarMapService_CreateDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).CreateDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/CreateDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).CreateDrink(ctx, req.(*CreateDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarMapService_UpdateDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).UpdateDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/UpdateDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).UpdateDrink(ctx, req.(*UpdateDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarMapService_DeleteDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).DeleteDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/DeleteDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).DeleteDrink(ctx, req.(*DeleteDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarMapService_ListDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDrinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).ListDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/ListDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).ListDrink(ctx, req.(*ListDrinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarMapService_GetDrink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDrinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).GetDrink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/GetDrink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).GetDrink(ctx, req.(*GetDrinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarMapService_CreateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).CreateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/CreateIngredient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).CreateIngredient(ctx, req.(*CreateIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarMapService_UpdateIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).UpdateIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/UpdateIngredient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).UpdateIngredient(ctx, req.(*UpdateIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BarMapService_DeleteIngredient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIngredientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarMapServiceServer).DeleteIngredient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/postgres.BarMapService/DeleteIngredient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarMapServiceServer).DeleteIngredient(ctx, req.(*DeleteIngredientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BarMapService_ServiceDesc is the grpc.ServiceDesc for BarMapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BarMapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "postgres.BarMapService",
	HandlerType: (*BarMapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBar",
			Handler:    _BarMapService_CreateBar_Handler,
		},
		{
			MethodName: "UpdateBar",
			Handler:    _BarMapService_UpdateBar_Handler,
		},
		{
			MethodName: "DeleteBar",
			Handler:    _BarMapService_DeleteBar_Handler,
		},
		{
			MethodName: "ListBar",
			Handler:    _BarMapService_ListBar_Handler,
		},
		{
			MethodName: "GetBar",
			Handler:    _BarMapService_GetBar_Handler,
		},
		{
			MethodName: "CreateDrink",
			Handler:    _BarMapService_CreateDrink_Handler,
		},
		{
			MethodName: "UpdateDrink",
			Handler:    _BarMapService_UpdateDrink_Handler,
		},
		{
			MethodName: "DeleteDrink",
			Handler:    _BarMapService_DeleteDrink_Handler,
		},
		{
			MethodName: "ListDrink",
			Handler:    _BarMapService_ListDrink_Handler,
		},
		{
			MethodName: "GetDrink",
			Handler:    _BarMapService_GetDrink_Handler,
		},
		{
			MethodName: "CreateIngredient",
			Handler:    _BarMapService_CreateIngredient_Handler,
		},
		{
			MethodName: "UpdateIngredient",
			Handler:    _BarMapService_UpdateIngredient_Handler,
		},
		{
			MethodName: "DeleteIngredient",
			Handler:    _BarMapService_DeleteIngredient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "postgres/postgres.proto",
}
